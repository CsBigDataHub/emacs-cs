<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE cheatsheet SYSTEM "cheatsheet.dtd">
<?xml-stylesheet type="text/xsl" href="tohtml.xsl"?>

<cheatsheet version="1.0" lang="en" created="2017-09-29">

  <header>
    <title>The Big EMACS Cheatsheet</title>
    <subtitle>For version 25</subtitle>
  </header>

  <body>
    <chapter title="Command line options">
      <it>
        <key>--visit=&lt;filespec&gt; | --file=&lt;filespec&gt; |
        &lt;filespec&gt;</key>
        <func/>
        <descr>Open filespec into individual buffers for
        editing.</descr>
      </it>

      <it>
        <key>+row[:column]</key>
        <func/>
        <descr>Move point to line number row and (optional) horizontal
        position column in the file (default is +1:1).</descr>
      </it>

      <it>
        <key>--insert &lt;file&gt;</key>
        <func/>
        <descr>Insert file at the beginning of the buffer.</descr>
      </it>

      <it>
        <key>--load &lt;file&gt; | -l &lt;file&gt;</key>
        <func/>
        <descr>Execute the Emacs Lisp instructions in file.</descr>
      </it>

      <it>
        <key>--g &lt;dimensions&gt; | --geometry
        &lt;dimensions&gt;</key>
        <func/>
        <descr>Set the window's width, height, and position according
        to the given X window dimensions (the default is to make the
        window 80x40 characters).</descr>
      </it>

      <it>
        <key>-nw | --no-windows</key>
        <func/>
        <descr>In X, don't use an X client window, but open in the
        current terminal window instead. This option doesn't affect
        console sessions.</descr>
      </it>
    </chapter>

    <chapter title="Prefixes">
      <it>
        <key>C-c</key>
        <func/>
        <descr>Commands particular to the current editing mode</descr>
      </it>

      <it>
        <key>C-x</key>
        <func/>
        <descr>Commands for files and buffers</descr>
      </it>

      <it>
        <key>C-h</key>
        <func/>
        <descr>Help commands</descr>
      </it>

      <it>
        <key>M-x</key>
        <func/>
        <descr>Literal function name</descr>
      </it>

      <it>
        <key>M-!</key>
        <func>shell-command</func>
        <descr>Execute external shell command from within Emacs.The
        output from the shell command is displayed in the minibuffer
        or in a separate buffer, depending on the output size. When
        used with a prefix argument (e.g, <kbd>C-u M-!</kbd>), the
        shell-command output is inserted in the current buffer at
        point.</descr>
      </it>

      <it>
        <key>M-|</key>
        <func>shell-command-on-region</func>
        <descr>Provide the region text to the shell command as input.
        If you want the shell to replace the region text with the
        output from the shell command, use <kbd>C-u M-|</kbd>.</descr>
      </it>
    </chapter>

    <chapter title="Buffer and files functions">
      <it>
        <key>C-x C-f</key>
        <func>find-file</func>
        <descr>Visit a file.</descr>
      </it>

      <it>
        <key>C-x C-s</key>
        <func>save-buffer</func>
        <descr>Save current buffer to disk.</descr>
      </it>

      <it>
        <key>C-x C-w</key>
        <func>write-file</func>
        <descr>Ask for a filename and write the current buffer with
        that name. Like the command "Save as ..." on other
        editors.</descr>
      </it>

      <it>
        <key>C-x s</key>
        <func>save-some-buffers</func>
        <descr>Ask about saving all unsaved buffers to disk.</descr>
      </it>

      <it>
        <key>C-x C-c</key>
        <func>save-buffers-kill-emacs</func>
        <descr>Ask about saving all unsaved buffers to disk and exit
        Emacs.</descr>
      </it>

      <it>
        <key>C-x C-z | C-z</key>
        <func>suspend-emacs</func>
        <descr>Suspend Emacs and make it a background process (press
        <kbd>fg | fg %emacs</kbd> to <em>awake</em> it back.</descr>
      </it>

      <it>
        <key>C-x b</key>
        <func>Switch-to-buffer</func>
        <descr>Display buffer <kbd>BUFFER-OR-NAME</kbd> in the
        selected window.</descr>
      </it>

      <it>
        <key>C-x C-b</key>
        <func>list-buffers</func>
        <descr>List all buffers.</descr>
      </it>

      <it>
        <key>C-x k</key>
        <func>kill-buffer</func>
        <descr>Kill a buffer (the current buffer, by default).</descr>
      </it>

      <it>
        <key>C-x C-q</key>
        <func>vc-toggle-read-only</func>
        <descr>Toggle read-only status on the current buffer (and
        perform version control if applicable).</descr>
      </it>

      <it>
        <key>C-x i</key>
        <func>insert-file</func>
        <descr>Insert the contents of a file at point.</descr>
      </it>
    </chapter>

    <chapter title="Movement and navigation">
      <it>
        <key>C-p | UpArrow</key>
        <func>previous-line</func>
        <descr>Move point up to the previous line.</descr>
      </it>

      <it>
        <key>C-n | DownArrow</key>
        <func>next-line</func>
        <descr>Move point down to the next line.</descr>
      </it>

      <it>
        <key>C-f | RightArrow</key>
        <func>forward-char</func>
        <descr>Move point forward to the next character.</descr>
      </it>

      <it>
        <key>C-b | LeftArrow</key>
        <func>back-char</func>
        <descr>Move point backward to the previous character.</descr>
      </it>

      <it>
        <key>M-f | C-RightArrow</key>
        <func>forward-word</func>
        <descr>Move point forward to the next word.</descr>
      </it>

      <it>
        <key>M-b | C-LeftArrow</key>
        <func>backward-word</func>
        <descr>Move point backward to the previous word.</descr>
      </it>

      <it>
        <key>C-v | PgDn</key>
        <func>scroll-up</func>
        <descr>Scroll the text upward by a screen.</descr>
      </it>

      <it>
        <key>M-v | PgUp</key>
        <func>scroll-down</func>
        <descr>Scroll the text downward by a screen.</descr>
      </it>

      <it>
        <key>C-Home</key>
        <func>beginning-of-buffer</func>
        <descr>Move point to the beginning of the buffer. (On some
        versions, this key is defined by default to move to the
        beginning of the current line.)</descr>
      </it>

      <it>
        <key>C-End</key>
        <func>end-of-buffer</func>
        <descr>Move point to the end of the buffer. (On some versions,
        this key is defined by default to move to the end of the
        current line.)</descr>
      </it>

      <it>
        <key>Home | C-a</key>
        <func>beginning-of-line</func>
        <descr>Move point to the beginning of the line.</descr>
      </it>

      <it>
        <key>End | C-e</key>
        <func>end-of-line</func>
        <descr>Move point to the end of the line.</descr>
      </it>

      <it>
        <key>M-a</key>
        <func>beginning-of-sentence</func>
        <descr>Move point to the beginning of the sentence.</descr>
      </it>

      <it>
        <key>M-e</key>
        <func>end-of-sentence</func>
        <descr>Move point to the end of the sentence.</descr>
      </it>

      <it>
        <key>C-{</key>
        <func>beginning-of-paragraph</func>
        <descr>Move point to the beginning of the paragraph.</descr>
      </it>

      <it>
        <key>C-}</key>
        <func>end-of-paragraph</func>
        <descr>Move point to the end of the paragraph.</descr>
      </it>
    </chapter>

    <chapter title="Navigating over balanced expressions">
      <it>
        <key>C-M-n</key>
        <func>forward-list</func>
        <descr>Move forward over a parenthetical group.</descr>
      </it>

      <it>
        <key>C-M-p</key>
        <func>backward-list</func>
        <descr>Move backward over a parenthetical group.</descr>
      </it>

      <it>
        <key>C-M-f</key>
        <func>forward-sexp</func>
        <descr>Move forward over a balanced expression.</descr>
      </it>

      <it>
        <key>C-M-b</key>
        <func>backward-sexp</func>
        <descr>Move backward over a balanced expression.</descr>
      </it>

      <it>
        <key>C-M-k</key>
        <func>kill-sexp</func>
        <descr>Kill balanced expression forward.</descr>
      </it>

      <it>
        <key>C-M-SPC</key>
        <func>mark-sexp</func>
        <descr>Put the mark at the end of the sexp.</descr>
      </it>
    </chapter>

    <chapter title="Common editing commands">
      <it>
        <key>Ins</key>
        <func>overwrite-mode</func>
        <descr>Toggle overwrite mode (default is off).</descr>
      </it>

      <it>
        <key>Backspace | Del</key>
        <func>delete-backward-char</func>
        <descr>Delete the character before point.</descr>
      </it>

      <it>
        <key>C-d</key>
        <func>delete-char</func>
        <descr>Delete the character at point.</descr>
      </it>

      <it>
        <key>M-d</key>
        <func>kill-word</func>
        <descr>Delete the characters from point forward to the end of
        the word.</descr>
      </it>

      <it>
        <key>M-Backspace | M-Del</key>
        <func>backward-kill-word</func>
        <descr>Delete the characters from point backward to the
        beginning of the word.</descr>
      </it>

      <it>
        <key>C-_</key>
        <func>undo</func>
        <descr>Undo your last typing or action. To <em>redo</em> just
        undo the last undo (!).</descr>
      </it>

      <it>
        <key>C-x z</key>
        <func>repeat</func>
        <descr>Repeat most recently executed command.</descr>
      </it>

      <it>
        <key>C-x M-: | C-x M-ESC</key>
        <func>repeat-complex-command</func>
        <descr>Edit and re-evaluate last complex command. A complex
        command is one which used the minibuffer. The command is
        placed in the minibuffer as a Lisp form for editing. The
        result is executed, repeating the command as changed.</descr>
      </it>

      <it>
        <key>C-q[CHAR] or [NUM]</key>
        <func>quoted-insert</func>
        <descr>Insert, at point, the literal character keypress or the
        character whose octal value is XXX.</descr>
      </it>

      <it>
        <key>C-u[NUM][COMMAND]</key>
        <func>universal-argument</func>
        <descr>Execute command a total of number (default 4) times in
        succession.</descr>
      </it>
    </chapter>

    <chapter title="Functions for marking and killing text">
      <it>
        <key>C-Space</key>
        <func>set-mark-command</func>
        <descr>Set the mark at point.</descr>
      </it>

      <it>
        <key>C-k</key>
        <func>kill-line</func>
        <descr>Kill all text from point to the end of the
        line.</descr>
      </it>

      <it>
        <key>C-w</key>
        <func>kill-region</func>
        <descr>Kill the region.</descr>
      </it>

      <it>
        <key>M-w</key>
        <func>kill-ring-save</func>
        <descr>Save the region in the kill ring, but don't kill
        it.</descr>
      </it>

      <it>
        <key>C-y</key>
        <func>yank</func>
        <descr>Yank text from the kill ring.</descr>
      </it>
    </chapter>

    <chapter title="Commands for using rectangles">
      <it>
        <key>C-space</key>
        <func>set-mark-command</func>
        <descr>Marks one corner of a rectangle (point marks the
        opposite corner).</descr>
      </it>

      <it>
        <key>C-x r k</key>
        <func>kill-rectangle</func>
        <descr>Kills the current rectangle and saves it in a special
        rectangle buffer.</descr>
      </it>

      <it>
        <key>C-x r d</key>
        <func>delete-rectangle</func>
        <descr>Deletes the current rectangle and doesn't save it for
        yanking.</descr>
      </it>

      <it>
        <key>C-x r c</key>
        <func>clear-rectangle</func>
        <descr>Clears the current rectangle, replacing the entire area
        with whitespace.</descr>
      </it>

      <it>
        <key>C-x r o</key>
        <func>open-rectangle</func>
        <descr>Opens the current rectangle, filling the entire area
        with whitespace and moving all text from the rectangle to the
        right.</descr>
      </it>

      <it>
        <key>C-x r y</key>
        <func>yank-rectangle</func>
        <descr>Yanks the contents of the last-killed rectangle at
        point, moving all existing text to the right.</descr>
      </it>
    </chapter>

    <chapter title="Advanced mark and selection commands">
      <it>
        <key>C-u C-space</key>
        <func>pop-to-mark-command</func>
        <descr>Moves to the previous mark in the mark ring.</descr>
      </it>

      <it>
        <key>C-x C-x</key>
        <func>exchange-point-and-mark</func>
        <descr>Swaps the location of point and the mark.</descr>
      </it>

      <it>
        <key>M-@</key>
        <func>mark-word</func>
        <descr>Marks all text from point to the end of the current
        word.</descr>
      </it>

      <it>
        <key>M-h</key>
        <func>mark-paragraph</func>
        <descr>Marks the current paragraph, regardless of the location
        of point.</descr>
      </it>

      <it>
        <key/>
        <func>transient-mark-mode</func>
        <descr>Toggles Transient Mark mode.</descr>
      </it>

      <it>
        <key>C-x h</key>
        <func>mark-whole-buffer</func>
        <descr>Marks the entire buffer, regardless of the location of
        point.</descr>
      </it>
    </chapter>

    <chapter title="Advanced kill and yank commands">
      <it>
        <key>[NUM] C-k</key>
        <func>kill-line</func>
        <descr>Kills integer number of lines. If 0, kills from point
        to the beginning of the line; if negative, kills in reverse
        (not sure for version 25).</descr>
      </it>

      <it>
        <key>M-k</key>
        <func>kill-sentence</func>
        <descr>Kills from point to the end of the sentence.</descr>
      </it>

      <it>
        <key>M-z</key>
        <func>zap-to-char</func>
        <descr>Zaps all text from point to the specified
        character.</descr>
      </it>

      <it>
        <key>M-y</key>
        <func>yank-pop</func>
        <descr>Moves to the next slot in the kill ring.</descr>
      </it>

      <it>
        <key>[NUM] C-y</key>
        <func>yank</func>
        <descr>Yanks the specified slot in the kill ring.</descr>
      </it>
    </chapter>

    <chapter title="Text mode key bindings">
      <it>
        <key>Esc</key>
        <func/>
        <descr>Prefix for mode-specific commands</descr>
      </it>

      <it>
        <key>Esc Tab | M-Tab</key>
        <func>ispell-complete-word</func>
        <descr/>
      </it>

      <it>
        <key>Esc S | M-S</key>
        <func>center-paragraph</func>
        <descr/>
      </it>

      <it>
        <key>Esc s | M-s</key>
        <func>center-line</func>
        <descr/>
      </it>
    </chapter>

    <chapter title="Text manipulation commands">
      <it>
        <key>C-x C-i | C-x Tab</key>
        <func>indent-rigidly</func>
        <descr>This command indents lines in the region (or at
        point).</descr>
      </it>

      <it>
        <key/>
        <func>fill-region</func>
        <descr>This command fills all paragraphs in the
        region.</descr>
      </it>

      <it>
        <key>M-q</key>
        <func>fill-paragraph</func>
        <descr>This command fills the single paragraph at
        point.</descr>
      </it>

      <it>
        <key>M-\</key>
        <func>delete-horizontal-space</func>
        <descr>This command removes any horizontal space to the right
        and left of point.</descr>
      </it>

      <it>
        <key>C-o</key>
        <func>open-line</func>
        <descr>This command opens a new line of vertical space below
        point, without moving point.</descr>
      </it>

      <it>
        <key>C-t</key>
        <func>transpose-chars</func>
        <descr>This command transposes the single characters to the
        right and left of point.</descr>
      </it>

      <it>
        <key>M-t</key>
        <func>transpose-words</func>
        <descr>This command transposes the single words to the right
        and left of point.</descr>
      </it>

      <it>
        <key>C-x C-t</key>
        <func>transpose-lines</func>
        <descr>This command transposes the line at point with the line
        before it.</descr>
      </it>

      <it>
        <key>M-^</key>
        <func>delete-indentation</func>
        <descr>This command joins the line at point with the previous
        line. Preface with <kbd>C-1</kbd> to join the line at point
        with the next line.</descr>
      </it>

      <it>
        <key>M-u</key>
        <func>uppercase-word</func>
        <descr>This command converts the text at point to the end of
        the word to uppercase letters.</descr>
      </it>

      <it>
        <key>M-l</key>
        <func>downcase-word</func>
        <descr>This command converts the text at point to the end of
        the word to lowercase letters.</descr>
      </it>

      <it>
        <key>C-x C-l</key>
        <func>downcase-region</func>
        <descr>This command converts the region to lowercase
        letters.</descr>
      </it>

      <it>
        <key>C-x C-u</key>
        <func>upcase-region</func>
        <descr>This command converts the region to uppercase
        letters.</descr>
      </it>
    </chapter>

    <chapter title="Search and replace commands">
      <it>
        <key>C-s [STRING] [C-w] [C-y]</key>
        <func>isearch-forward</func>
        <descr>Incrementally search forward through the buffer for
        string (default is the last search string you gave, if any);
        <kbd>C-w</kbd> uses the text from point forward to the end of
        the word and <kbd>C-y</kbd> uses everything from point to the
        end of the line.</descr>
      </it>

      <it>
        <key>C-r [STRING] [C-w] [C-y]</key>
        <func>isearch-backward</func>
        <descr>Incrementally search backward through the buffer for
        string (default is the last search string you gave, if any);
        <kbd>C-w</kbd> uses the text from point forward to the end of
        the word, and <kbd>C-y</kbd> uses everything from point to the
        end of the line.</descr>
      </it>

      <it>
        <key>C-s Enter C-w [WORD OR PHRASE]</key>
        <func>word-search-forward</func>
        <descr>Search forward through the buffer for the given word or
        phrase, regardless of spacing.</descr>
      </it>

      <it>
        <key>C-r Enter C-w [WORD OR PHRASE]</key>
        <func>word-search-backward</func>
        <descr>Search backward through the buffer for the given word
        or phrase, regardless of spacing.</descr>
      </it>

      <it>
        <key>C-M-s</key>
        <func>isearch-forward-regexp</func>
        <descr>Incrementally search forward through the buffer for a
        given regular expression.</descr>
      </it>

      <it>
        <key>C-M-r</key>
        <func>isearch-backward-regexp</func>
        <descr>Incrementally search backward through the buffer for a
        given regular expression.</descr>
      </it>

      <it>
        <key/>
        <func>replace-string</func>
        <descr>Search for a given string from point to the end of the
        buffer and replace it with a given string.</descr>
      </it>

      <it>
        <key/>
        <func>replace-regexp</func>
        <descr>Search for a given regular expression from point to the
        end of the buffer and replace it with a given string.</descr>
      </it>

      <it>
        <key>M-%</key>
        <func>query-replace</func>
        <descr>Search for a given string from point to the end of the
        buffer and, in each instance, query to replace it with a given
        string.</descr>
      </it>

      <it>
        <key>C-M-%</key>
        <func>query-replace-regexp</func>
        <descr>Search for a given regular expression from point to the
        end of the buffer and, in each instance, query to replace it
        with a given string.</descr>
      </it>
    </chapter>

    <chapter title="Regular expressions">
      <it>
        <key>.</key>
        <func>any character (but newline)</func>
        <descr/>
      </it>

      <it>
        <key>*</key>
        <func>previous character or group, repeated 0 or more
        time</func>
        <descr/>
      </it>

      <it>
        <key>+</key>
        <func>previous character or group, repeated 1 or more
        time</func>
        <descr/>
      </it>

      <it>
        <key>?</key>
        <func>previous character or group, repeated 0 or 1 time</func>
        <descr/>
      </it>

      <it>
        <key>^</key>
        <func>start of line</func>
        <descr/>
      </it>

      <it>
        <key>$</key>
        <func>end of line</func>
        <descr/>
      </it>

      <it>
        <key>[...]</key>
        <func>any character between brackets</func>
        <descr/>
      </it>

      <it>
        <key>[^..]</key>
        <func>any character not in the brackets</func>
        <descr/>
      </it>

      <it>
        <key>[a-z]</key>
        <func>any character between a and z</func>
        <descr/>
      </it>

      <it>
        <key>\</key>
        <func>prevents interpretation of following special char</func>
        <descr/>
      </it>

      <it>
        <key>\| or \w</key>
        <func>word constituent</func>
        <descr/>
      </it>

      <it>
        <key>\b</key>
        <func>word boundary</func>
        <descr/>
      </it>

      <it>
        <key>\sc</key>
        <func>character with c syntax (e.g. \s- for whitespace
        char)</func>
        <descr/>
      </it>

      <it>
        <key>\( \)</key>
        <func>start\end of group</func>
        <descr/>
      </it>

      <it>
        <key>\&lt; \&gt;</key>
        <func>start\end of word (faulty rendering: backslash +
        less-than and backslash + greater-than)</func>
        <descr/>
      </it>

      <it>
        <key>\_&lt; \_&gt;</key>
        <func>start\end of symbol</func>
        <descr/>
      </it>

      <it>
        <key>\` \'</key>
        <func>start\end of buffer\string</func>
        <descr/>
      </it>

      <it>
        <key>\1</key>
        <func>string matched by the first group</func>
        <descr/>
      </it>

      <it>
        <key>\n</key>
        <func>string matched by the nth group</func>
        <descr/>
      </it>

      <it>
        <key>\{3\}</key>
        <func>previous character or group, repeated 3 times</func>
        <descr/>
      </it>

      <it>
        <key>\{3,\}</key>
        <func>previous character or group, repeated 3 or more
        times</func>
        <descr/>
      </it>

      <it>
        <key>\{3,6\}</key>
        <func>previous character or group, repeated 3 to 6
        times</func>
        <descr/>
      </it>

      <it>
        <key>\=</key>
        <func>match succeeds if it is located at point</func>
        <descr/>
      </it>

      <it>
        <key>*?, +?, and ??</key>
        <func>non-greedy versions of *, +, and ?</func>
        <descr/>
      </it>

      <it>
        <key>\ca</key>
        <func>ascii character</func>
        <descr/>
      </it>

      <it>
        <key>\Ca</key>
        <func>non-ascii character (newline included)</func>
        <descr/>
      </it>

      <it>
        <key>\cl</key>
        <func>latin character</func>
        <descr/>
      </it>

      <it>
        <key>\cg</key>
        <func>greek character</func>
        <descr/>
      </it>

      <it>
        <key>[:digit:]</key>
        <func>a digit, same as [0-9] (\d is not supported)</func>
        <descr/>
      </it>

      <it>
        <key>[:alpha:]</key>
        <func>a letter (an alphabetic character)</func>
        <descr/>
      </it>

      <it>
        <key>[:alnum:]</key>
        <func>a letter or a digit (an alphanumeric character)</func>
        <descr/>
      </it>

      <it>
        <key>[:upper:]</key>
        <func>a letter in uppercase</func>
        <descr/>
      </it>

      <it>
        <key>[:lower:]</key>
        <func>a letter in lowercase</func>
        <descr/>
      </it>

      <it>
        <key>[:graph:]</key>
        <func>a visible character</func>
        <descr/>
      </it>

      <it>
        <key>[:print:]</key>
        <func>a visible character plus the space character</func>
        <descr/>
      </it>

      <it>
        <key>[:space:]</key>
        <func>a whitespace character, as defined by the syntax table,
        but typically [ \t\r\n\v\f], which includes the newline
        character</func>
        <descr/>
      </it>

      <it>
        <key>[:blank:]</key>
        <func>a space or tab character</func>
        <descr/>
      </it>

      <it>
        <key>[:xdigit:]</key>
        <func>an hexadecimal digit</func>
        <descr/>
      </it>

      <it>
        <key>[:cntrl:]</key>
        <func>a control character</func>
        <descr/>
      </it>

      <it>
        <key>[:ascii:]</key>
        <func>an ascii character</func>
        <descr/>
      </it>

      <it>
        <key>\s-</key>
        <func>whitespace character</func>
        <descr/>
      </it>

      <it>
        <key>\sw</key>
        <func>word constituent</func>
        <descr/>
      </it>

      <it>
        <key>\s_</key>
        <func>symbol constituent</func>
        <descr/>
      </it>

      <it>
        <key>\s.</key>
        <func>punctuation character</func>
        <descr/>
      </it>

      <it>
        <key>\s(</key>
        <func>open delimiter character</func>
        <descr/>
      </it>

      <it>
        <key>\s)</key>
        <func>close delimiter character</func>
        <descr/>
      </it>

      <it>
        <key>\s"</key>
        <func>string quote character</func>
        <descr/>
      </it>

      <it>
        <key>\s\</key>
        <func>escape character</func>
        <descr/>
      </it>

      <it>
        <key>\s/</key>
        <func>character quote character</func>
        <descr/>
      </it>

      <it>
        <key>\s$</key>
        <func>paired delimiter</func>
        <descr/>
      </it>

      <it>
        <key>\s'</key>
        <func>expression prefix</func>
        <descr/>
      </it>

      <it>
        <key>\s&lt;</key>
        <func>comment starter</func>
        <descr/>
      </it>

      <it>
        <key>\s&gt;</key>
        <func>comment ender</func>
        <descr/>
      </it>

      <it>
        <key>\s!</key>
        <func>generic comment delimiter</func>
        <descr/>
      </it>

      <it>
        <key>\s|</key>
        <func>generic string delimiter</func>
        <descr/>
      </it>
    </chapter>

    <chapter title="Regex examples">
      <it>
        <key>[-+[:digit:]]</key>
        <func>digit or + or - sign</func>
        <descr/>
      </it>

      <it>
        <key>\(\+\|-\)?[0-9]+\(\.[0-9]+\)?</key>
        <func>decimal number (-2 or 1.5 but not .2 or 1.)</func>
        <descr/>
      </it>

      <it>
        <key>\&lt;\(\w+\) +\1\&gt;</key>
        <func>two consecutive, identical words</func>
        <descr/>
      </it>

      <it>
        <key>\&lt;[[:upper:]]\w*</key>
        <func>word starting with an uppercase letter</func>
        <descr/>
      </it>

      <it>
        <key> +$</key>
        <func>trailing whitespaces (note the starting SPC)</func>
        <descr/>
      </it>

      <it>
        <key>\w\{20,\}</key>
        <func>word with 20 letters or more</func>
        <descr/>
      </it>

      <it>
        <key>\w+phony\&gt;</key>
        <func>word ending by phony</func>
        <descr/>
      </it>

      <it>
        <key>\(19\|20\)[0-9]\{2\}</key>
        <func>year 1900-2099</func>
        <descr/>
      </it>

      <it>
        <key>^.\{6,\}</key>
        <func>at least 6 symbols</func>
        <descr/>
      </it>

      <it>
        <key>^[a-zA-Z0-9_]\{3,16\}$</key>
        <func>decent string for a user name</func>
        <descr/>
      </it>

      <it>
        <key>&lt;tag[^> C-q C-j ]*>\(.*?\)&lt;/tag></key>
        <func>html tag</func>
        <descr/>
      </it>
    </chapter>

    <chapter title="Re-builder">
      <it>
        <key>M-x re-b &lt;RET&gt;</key>
        <func>re-builder</func>
        <descr>Start the <kbd>RE Buider</kbd> mode.</descr>
      </it>

      <it>
        <key>C-c C-q</key>
        <func>reb-quit</func>
        <descr>Quit the RE Builder mode.</descr>
      </it>

      <it>
        <key>C-c C-c</key>
        <func>reb-toggle-case</func>
        <descr>Toggle case sensitivity of searches for RE Builder
        target buffer.</descr>
      </it>

      <it>
        <key>C-c C-w</key>
        <func>reb-copy</func>
        <descr>Copy current RE into the kill ring for later
        insertion.</descr>
      </it>

      <it>
        <key>C-c C-s</key>
        <func>reb-next-match</func>
        <descr>Go to next match in the RE Builder target
        window.</descr>
      </it>

      <it>
        <key>C-c C-r</key>
        <func>reb-prev-match</func>
        <descr>Go to previous match in the RE Builder target
        window.</descr>
      </it>

      <it>
        <key>C-c C-i</key>
        <func>reb-change-syntax</func>
        <descr>Change the syntax used by the RE Builder.</descr>
      </it>

      <it>
        <key>C-c C-e</key>
        <func>reb-enter-subexp-mode</func>
        <descr>Enter the subexpression mode in the RE Builder.</descr>
      </it>

      <it>
        <key>C-c C-b</key>
        <func>reb-change-target-buffer</func>
        <descr>Change the target buffer and display it in the target
        window.</descr>
      </it>

      <it>
        <key>C-c C-u</key>
        <func>reb-force-update</func>
        <descr>Force an update in the RE Builder target window without
        a match limit.</descr>
      </it>
    </chapter>

    <chapter title="Registers commands">
      <it>
        <key>C-x r space X</key>
        <func>point-to-register</func>
        <descr>Save point to register X.</descr>
      </it>

      <it>
        <key>C-x r s X</key>
        <func>copy-to-register</func>
        <descr>Save the region to register X.</descr>
      </it>

      <it>
        <key>C-x r r X</key>
        <func>copy-rectangle-to-register</func>
        <descr>Save the selected rectangle to register X.</descr>
      </it>

      <it>
        <key/>
        <func>view-register</func>
        <descr>View the contents of a given register.</descr>
      </it>

      <it>
        <key>C-x r j X</key>
        <func>jump-to-register</func>
        <descr>Move point to the location given in register X.</descr>
      </it>

      <it>
        <key>C-x r i X</key>
        <func>insert-register</func>
        <descr>Insert the contents of register X at point.</descr>
      </it>
    </chapter>

    <chapter title="Abbreviations">
      <it>
        <key>(setq-default abbrev-mode t)</key>
        <func/>
        <descr>Write this into <kbd>.emacs</kbd> to switch
        <em>abbrev</em> minor mode on at start-up.</descr>
      </it>

      <it>
        <key/>
        <func>abbrev-mode</func>
        <descr>Toggles <em>Abbrev</em> mode; with a numeric argument,
        it turns <em>Abbrev</em> mode on if the argument is positive,
        off otherwise.</descr>
      </it>

      <it>
        <key>C-x a g</key>
        <func>add-global-abbrev</func>
        <descr>Define an abbrev, using one or more words before point
        as its expansion.</descr>
      </it>

      <it>
        <key>C-x a l</key>
        <func>add-mode-abbrev</func>
        <descr>Similar, but define an abbrev specific to the current
        major mode.</descr>
      </it>

      <it>
        <key>C-x a i g</key>
        <func>inverse-add-global-abbrev</func>
        <descr>Define a word in the buffer as an abbrev.</descr>
      </it>

      <it>
        <key>C-x a i l</key>
        <func>inverse-add-mode-abbrev</func>
        <descr>Define a word in the buffer as a mode-specific
        abbrev.</descr>
      </it>

      <it>
        <key>M-'</key>
        <func>abbrev-prefix-mark</func>
        <descr>Separate a prefix from a following abbrev to be
        expanded.</descr>
      </it>

      <it>
        <key>C-x a e</key>
        <func>expand-abbrev</func>
        <descr>Expand the abbrev before point. This is effective even
        when <em>Abbrev</em> mode is not enabled.</descr>
      </it>

      <it>
        <key/>
        <func>expand-region-abbrevs</func>
        <descr>Expand some or all abbrevs found in the region.</descr>
      </it>

      <it>
        <key/>
        <func>list-abbrevs</func>
        <descr>Display a list of all abbrev definitions. With a
        numeric argument, list only local abbrevs.</descr>
      </it>

      <it>
        <key/>
        <func>edit-abbrevs</func>
        <descr>Edit a list of abbrevs; you can add, alter or remove
        definitions.</descr>
      </it>

      <it>
        <key>M-/</key>
        <func>dabbrev-expand</func>
        <descr>Expand the word in the buffer before point as a dynamic
        abbrev, by searching for words starting with that
        abbreviation.</descr>
      </it>

      <it>
        <key>C-M-/</key>
        <func>dabbrev-completion</func>
        <descr>Complete the word before point as a dynamic
        abbrev.</descr>
      </it>
    </chapter>

    <chapter title="Bookmarks commands">
      <it>
        <key>C-x r m Bookmark</key>
        <func>bookmark-set</func>
        <descr>Set a bookmark named Bookmark.</descr>
      </it>

      <it>
        <key>C-x r l</key>
        <func>bookmarks-bmenu-list</func>
        <descr>List all saved bookmarks.</descr>
      </it>

      <it>
        <key/>
        <func>bookmark-delete</func>
        <descr>Delete a bookmark.</descr>
      </it>

      <it>
        <key>C-x r b Bookmark</key>
        <func>bookmark-jump</func>
        <descr>Jump to the location set in the bookmark named
        Bookmark.</descr>
      </it>

      <it>
        <key/>
        <func>bookmark-save</func>
        <descr>Save all bookmarks to the bookmark file,
        ~/.emacs.bmk.</descr>
      </it>
    </chapter>

    <chapter title="Window-manipulation commands">
      <it>
        <key>C-x 2</key>
        <func>split-window-vertically</func>
        <descr>Split the current window in half across the middle,
        stacking the new buffers vertically.</descr>
      </it>

      <it>
        <key>C-x 4 b</key>
        <func>switch-to-buffer-other-window</func>
        <descr>Split the current window in half vertically, prompting
        for the buffer to use the bottom window and making that the
        active window.</descr>
      </it>

      <it>
        <key>C-x 4 C-o</key>
        <func>display-buffer</func>
        <descr>Display a buffer in another window, prompting for the
        buffer to use the other window but keeping the current window
        active. (If only one window exists, then split the window
        vertically to display the other buffer.)</descr>
      </it>

      <it>
        <key>C-x 4 f</key>
        <func>find-file-other-window</func>
        <descr>Open a new file in a new buffer, drawing it in a new
        vertical window.</descr>
      </it>

      <it>
        <key>C-x 4 r</key>
        <func>find-file-read-only-other-window</func>
        <descr>Open a new file in a new read-only buffer, drawing it
        in a new vertical window.</descr>
      </it>

      <it>
        <key>C-M-v</key>
        <func>scroll-other-window</func>
        <descr>Scroll to the window that would be the next one to
        switch to with <kbd>C-x o</kbd>.</descr>
      </it>

      <it>
        <key/>
        <func>scroll-all</func>
        <descr>Toggle the scroll-all minor mode. When it's on, all
        windows displaying the buffer in the current window are
        scrolled simultaneously and in equal, relative
        amounts.</descr>
      </it>

      <it>
        <key>C-x o</key>
        <func>other-window</func>
        <descr>Move the cursor to the next window, and make it the
        active window.</descr>
      </it>

      <it>
        <key>C-x 0</key>
        <func>delete-window</func>
        <descr>Delete the current window, and move the cursor to the
        window that would be the next one to switch to with
        <kbd>C-x o</kbd>.</descr>
      </it>

      <it>
        <key>C-x 1</key>
        <func>delete-other-windows</func>
        <descr>Delete all windows except the current window.</descr>
      </it>

      <it>
        <key>C-x 4 0</key>
        <func>kill-buffer-and-window</func>
        <descr>Delete the current window, and kill its buffer.</descr>
      </it>

      <it>
        <key>C-x 3</key>
        <func>split-window-horizontally</func>
        <descr>Split the current window in half down the middle,
        stacking the new buffers horizontally.</descr>
      </it>

      <it>
        <key/>
        <func>follow-mode</func>
        <descr>Toggle follow, a minor mode. When it's on in a buffer,
        all windows displaying the buffer are connected into a large
        virtual window.</descr>
      </it>

      <it>
        <key>C-x ^</key>
        <func>enlarge-window</func>
        <descr>Make the current window taller by a line; preceded by a
        negative, this makes the current window shorter by a
        line.</descr>
      </it>

      <it>
        <key>C-x }</key>
        <func>shrink-window-horizontally</func>
        <descr>Make the current active window thinner by a single
        column.</descr>
      </it>

      <it>
        <key>C-x {</key>
        <func>enlarge-window-horizontally</func>
        <descr>Make the current active window wider by a single
        column.</descr>
      </it>

      <it>
        <key>C-x -</key>
        <func>shrink-window-if-larger-than-buffer</func>
        <descr>Reduce the current active window to the smallest
        possible size for the buffer it contains.</descr>
      </it>

      <it>
        <key>C-x +</key>
        <func>balance-windows</func>
        <descr>Balance the size of all windows, making them
        approximately equal.</descr>
      </it>

      <it>
        <key/>
        <func>compare-windows</func>
        <descr>Compare the current window with the next window,
        beginning with point in both windows and moving point in both
        buffers to the first character that differs until reaching the
        end of the buffer.</descr>
      </it>
    </chapter>

    <chapter title="Shell commands">
      <it>
        <key>M-! &lt;cmd&gt;</key>
        <func>shell-command</func>
        <descr>Run the shell command line <kbd>cmd</kbd> and display
        the output.</descr>
      </it>

      <it>
        <key>M-| &lt;cmd&gt;</key>
        <func>shell-command-on-region</func>
        <descr>Run the shell command line <kbd>cmd</kbd> with region
        contents as input; optionally replace the region with the
        output.</descr>
      </it>

      <it>
        <key/>
        <func>shell</func>
        <descr>Run a subshell with input and output through an Emacs
        buffer. You can then give commands interactively.</descr>
      </it>

      <it>
        <key/>
        <func>term</func>
        <descr>Run a subshell with input and output through an Emacs
        buffer. You can then give commands interactively. Full
        terminal emulation is available.</descr>
      </it>

      <it>
        <key/>
        <func>eshell</func>
        <descr>Start the Emacs shell.</descr>
      </it>
    </chapter>

    <chapter title="Interactive Highlighting">
      <it>
        <key>C-x w h [regexp] &lt;RET&gt; [face] &lt;RET&gt;</key>
        <func>highlight-regexp</func>
        <descr>Highlight text that matches regexp using
        <kbd>face</kbd> face. The highlighting will remain as long as
        the buffer is loaded.</descr>
      </it>

      <it>
        <key>C-x w r [regexp] &lt;RET&gt;</key>
        <func>unhighlight-regexp</func>
        <descr>Unhighlight regexp.</descr>
      </it>

      <it>
        <key>C-x w l [regexp] &lt;RET&gt; [face] &lt;RET&gt;</key>
        <func>highlight-lines-matching-regexp</func>
        <descr>Highlight entire lines containing a match for regexp,
        using <kbd>face</kbd> face.</descr>
      </it>
    </chapter>

    <chapter title="nXML mode">
      <it>
        <key>M-x nxml-mode</key>
        <func/>
        <descr>Start the nXml mode.</descr>
      </it>
      
      <it>
        <key>C-c C-n</key>
        <func>rng-next-error</func>
        <descr>Move to the next location where the document structure
        is not valid.</descr>
      </it>

      <it>
        <key>C-c C-v</key>
        <func>rng-validate-mode</func>
        <descr>Turn validation on or off. If validation is turned on,
        in the status line's mode area you will see either “nXML
        Valid” or “nXML Invalid”. If validation is turned off, neither
        word will appear after “nXML” in the mode line.</descr>
      </it>

      <it>
        <key>tab</key>
        <func>indent-for-tab-command</func>
        <descr>Indent the current line according to the level of
        nested block tags. The indentation is two spaces per
        level.</descr>
      </it>

      <it>
        <key>M-C-\</key>
        <func>indent-region</func>
        <descr>Indent all the lines in the region using the same
        process as for tab.</descr>
      </it>

      <it>
        <key>C-c C-f</key>
        <func>nxml-finish-element</func>
        <descr>Insert an end tag for whatever element the cursor is
        in.</descr>
      </it>

      <it>
        <key>C-c C-i</key>
        <func>nxml-balanced-close-start-tag-inline</func> <descr>This
        command adds the closing “&gt;” and an end tag, and then
        places the cursor between the tags so you can type the
        content.</descr>
      </it>

      <it>
        <key>C-c C-b</key>
        <func>nxml-balanced-close-start-tag-block</func> <descr>Adds
        the closing “&gt;”, then a blank line, then an end tag on yet
        another separate line. The cursor is left indented at the
        proper level on the central blank line.</descr>
      </it>

      <it>
        <key>M-q</key>
        <func>fill-paragraph</func>
        <descr>Reformat the paragraph containing the cursor.</descr>
      </it>

      <it>
        <key>C-c C-x</key>
        <func>nxml-insert-xml-declaration</func>
        <descr>Inserts an XML processing instruction at the top of the
        file.</descr>
      </it>

      <it>
        <key>M-C-f</key>
        <func>forward-sexp</func>
        <descr>Move forward over tag.</descr>
      </it>

      <it>
        <key>M-C-b</key>
        <func>backward-sexp</func>
        <descr>Move backward over tag.</descr>
      </it>

      <it>
        <key>M-C-n</key>
        <func>nxml-forward-element</func>
        <descr>Move the cursor to the end of the next element.</descr>
      </it>

      <it>
        <key>M-C-p</key>
        <func>nxml-backward-element</func>
        <descr>Move the cursor before the previous element.</descr>
      </it>

      <it>
        <key>M-C-d</key>
        <func>nxml-down-element</func>
        <descr>Move the cursor to the next included element after
        point, to a position just after the start tag; d is for
        “down.”</descr>
      </it>

      <it>
        <key>M-C-u</key>
        <func>nxml-backward-up-element</func>
        <descr>Move the cursor to a position just before the start tag
        of the element containing point; u is for “up.”</descr>
      </it>

      <it>
        <key>C-c C-o C-d</key>
        <func>nxml-hide-subheadings</func>
        <descr>Hide the children of the current element, as in emacs
        outline-mode.</descr>
      </it>

      <it>
        <key>C-c C-o C-s</key>
        <func>nxml-hide-subheadings</func>
        <descr>Reverses the action of <kbd>C-c C-o C-d</kbd>,
        revealing the children of the current element.</descr>
      </it>
    </chapter>

    <chapter title="Managing variables">
      <it>
        <key/>
        <func>set-variable</func>
        <descr>Ask for a variable to change and for the needed
	      value.</descr>
      </it>

      <it>
        <key/>
        <func>auto-mode-alist</func>
        <descr>If set to <em>nil</em>, automatic selection of major
        mode based on file name extension is turned off. Its default
        value is a list of file name extensions and corresponding
        modes.</descr>
      </it>

      <it>
        <key/>
        <func>auto-save-default</func>
        <descr>If not set to <em>nil</em>, Emacs automatically saves a
	      changed buffer to its corresponding file at preset
	      intervals. Its default value is <kbd>t</kbd>.</descr>
      </it>

      <it>
        <key/>
        <func>auto-save-interval</func>
        <descr>Contains the number of character changes after which
	      Auto-save mode, if true, is invoked; the default value is
	      300.</descr>
      </it>

      <it>
        <key/>
        <func>calendar-latitude</func>
        <descr>Contains the latitude value for the location of the
	      user's workstation, in degrees; the default value is
	      <em>nil</em>.</descr>
      </it>

      <it>
        <key/>
        <func>calendar-longitude</func>
        <descr>Contains the longitude value for the location of the
	      user's workstation, in degrees; the default value is
	      <em>nil</em>.</descr>
      </it>

      <it>
        <key/>
        <func>calendar-location-name</func>
        <descr>Contains the value for the location name (such as city,
	      state, and country) for the location of the user's
	      workstation; the default value is <em>nil</em>.</descr>
      </it>

      <it>
        <key/>
        <func>colon-double-space</func>
        <descr>If not set to <em>nil</em>, commands for filling text
	      insert two spaces after a colon instead of one. The default
	      value is nil.</descr>
      </it>

      <it>
        <key/>
        <func>command-line-args</func>
        <descr>Contains the list of arguments used in the command line
	      that executed the current Emacs session.</descr>
      </it>

      <it>
        <key/>
        <func>command-line-default-directory</func>
        <descr>Contains the path name of the directory from which the
	      current Emacs session was executed.</descr>
      </it>

      <it>
        <key/>
        <func>compare-ignore-case</func>
        <descr>If not set to <em>nil</em>, Emacs ignores differences
	      in uppercase and lowercase letters when running the
	      compare-windows function, as described in fifth installment of
	      this series (see Resources). The default value is
	      <em>nil</em>.</descr>
      </it>

      <it>
        <key/>
        <func>confirm-kill-emacs</func>
        <descr>If set to <em>nil</em>, Emacs doesn't ask for a
	      confirmation when exiting; otherwise, the exit verification
	      might be customized as an Emacs Lisp function such as
	      <em>y-or-n-p</em>. The default value is <em>nil</em>.</descr>
      </it>

      <it>
        <key/>
        <func>default-justification</func>
        <descr>Sets the default justification style. The value can be
	      one of left, right, center, full, or none. The default value
	      is left.</descr>
      </it>

      <it>
        <key/>
        <func>default-major-mode</func>
        <descr>Selects the default major mode for new files or
	      buffers. The default value is
	      <em>fundamental-mode</em>.</descr>
      </it>

      <it>
        <key/>
        <func>display-time-24hr-format</func>
        <descr>If set to t, Emacs displays time in 24-hour military
	      format, instead of the standard 12-hour format with AM or PM
	      suffix. The default value is <em>nil</em>.</descr>
      </it>

      <it>
        <key/>
        <func>display-time-day-and-date</func>
        <descr>If not set to <em>nil</em>, Emacs displays time with
	      the current day of the week, current month, and current day of
	      the month, instead of just the hour and minute. The default
	      value is <em>nil</em>.</descr>
      </it>

      <it>
        <key/>
        <func>fill-column</func>
        <descr>Contains the number for the column on each line where
	      text begins to be filled to the next line. The default value
	      is 70.</descr>
      </it>

      <it>
        <key/>
        <func>initial-major-mode</func>
        <descr>Specifies the major mode to use for the
	      <em>*scratch*</em> buffer on startup. The default value is
	      <em>lisp-interaction-mode</em>.</descr>
      </it>

      <it>
        <key/>
        <func>inverse-video</func>
        <descr>If not set to <em>nil</em>, Emacs inverts the display
	      colors, if possible. The default value is
	      <em>nil</em>.</descr>
      </it>

      <it>
        <key/>
        <func>kill-ring</func>
        <descr>Contains the contents of the Emacs kill ring.</descr>
      </it>

      <it>
        <key/>
        <func>kill-ring-max</func>
        <descr>Sets the number of allowable entries in the Emacs kill
	      ring. The default value is 60.</descr>
      </it>

      <it>
        <key/>
        <func>kill-whole-line</func>
        <descr>If not set to <em>nil</em>, the kill-line function
	      (bound to <kbd>C-k</kbd>) kills the current line and its
	      trailing newline character, if the function is executed at the
	      very beginning of the line. The default value is
	      <em>nil</em>.</descr>
      </it>

      <it>
        <key/>
        <func>make-backup-files</func>
        <descr>If not set to <em>nil</em>, Emacs saves a backup of a
	      buffer before any changes are made to a file of the same name
	      but with a tilde character (<kbd>~</kbd>) appended to the
	      end.</descr>
      </it>

      <it>
        <key/>
        <func>mark-ring</func>
        <descr>Contains the contents of the current mark ring of the
	      buffer.</descr>
      </it>

      <it>
        <key/>
        <func>mark-ring-max</func>
        <descr>Contains the number of allowable entries in the mark
	      ring. The default value is 16.</descr>
      </it>

      <it>
        <key/>
        <func>mouse-avoidance-mode</func>
        <descr>Contains a value describing the type of mouse-avoidance
	      mode. The default value is <em>nil</em>.</descr>
      </it>

      <it>
        <key/>
        <func>next-line-add-newline</func>
        <descr>If not set to <em>nil</em>, Emacs adds a new line
	      whenever the down arrow is pressed at the end of the
	      buffer. The default value is <em>nil</em> (in more recent
	      versions of Emacs).</descr>
      </it>

      <it>
        <key/>
        <func>scroll-bar-mode</func>
        <descr>Contains the value for the side of the Emacs frame on
	      which to place the scroll bar: right or left. If set to
	      <em>nil</em>, the scroll bar is turned off.  The default value
	      is left.</descr>
      </it>

      <it>
        <key/>
        <func>scroll-step</func>
        <descr>Contains the number of lines to move through the buffer
	      lines with the <em>scroll-down</em> and <em>scroll-up</em>
	      functions (which are bound to the <kbd>PgDn</kbd> and
	      <kbd>PgUp</kbd> keys by default). If set to 0, Emacs centers
	      point in the middle of the window when scrolling.</descr>
      </it>

      <it>
        <key/>
        <func>show-trailing-whitespace</func>
        <descr>If not set to <em>nil</em>, Emacs makes any whitespace
	      at the end of lines in the current buffer visible. The default
	      value is <em>nil</em>.</descr>
      </it>

      <it>
        <key/>
        <func>visible-bell</func>
        <descr>If not set to <em>nil</em>, Emacs makes the frame blink
	      instead of ringing the audible system bell. The default value
	      is <em>nil</em>.</descr>
      </it>

      <it>
        <key/>
        <func>x-cut-buffer-max</func>
        <descr>Sets the maximum number of characters from the kill
	      ring that are also stored in the X Window System cut
	      buffer. The default value is 20000.</descr>
      </it>
    </chapter>

    <chapter title="Interface functions">
      <it>
        <key/>
        <func>column-number-mode</func>
        <descr>Toggle the display, in the mode line, of the current
	      column the cursor is at, preceded by a <kbd>C</kbd>. The
	      default value is <em>nil</em>.</descr>
      </it>

      <it>
        <key/>
        <func>display-time</func>
        <descr>Toggle the display of the current time in the mode
	      line. The default value is <em>nil</em>.</descr>
      </it>

      <it>
        <key/>
        <func>font-lock-mode</func>
        <descr>If not set to <em>nil</em>, Emacs turns on the Font
	      Lock mode automatically for the current buffer. The default
	      value is <em>nil</em>.</descr>
      </it>

      <it>
        <key/>
        <func>global-font-lock-mode</func>
        <descr>If not set to <em>nil</em>, Emacs turns on the Font
	      Lock mode automatically for all buffers. The default value is
	      <em>nil</em>.</descr>
      </it>

      <it>
        <key/>
        <func>line-number-mode</func>
        <descr>Toggle the display, in the mode line, of the current
	      line the cursor is at, preceded by an <kbd>L</kbd>. The
	      default value is <em>t</em>.</descr>
      </it>

      <it>
        <key/>
        <func>show-paren-mode</func>
        <descr>Allows one to see matching pairs of parentheses and
        other characters. When point is on one of the paired
        characters, the other is highlighted.</descr>
      </it>

      <it>
        <key/>
        <func>menu-bar-mode</func>
        <descr>Toggle the display of the Emacs menu bar. The default
	      value is <em>t</em>.</descr>
      </it>

      <it>
        <key/>
        <func>sunrise-sunset</func>
        <descr>Display the time of today's sunrise and sunset for the
	      current geographic location. If preceded with the
	      <kbd>universal-argument</kbd>, this function prompts for a
	      specific day.</descr>
      </it>

      <it>
        <key/>
        <func>tool-bar-mode</func>
        <descr>Toggle the display of the Emacs toolbar. The default
	      value is <em>t</em>.</descr>
      </it>
    </chapter>

    <chapter title="Customize functions">
      <it>
        <key/>
        <func>customize-changed-options &lt;Enterversion&gt;</func>
        <descr>Open a new customization buffer for all faces, options,
        or groups that have been changed since the version of Emacs
        given by version.</descr>
      </it>

      <it>
        <key/>
        <func>customize-customized</func>
        <descr>Open a new customization buffer for all options and
        faces that have already been customized but haven't been saved
        to disk.</descr>
      </it>

      <it>
        <key/>
        <func>customize-face &lt;Enter&gt; &lt;regexp&gt;</func>
        <descr>Open a new customization buffer for all the face,
        option, or groups relevant to the regular expression given by
        <kbd>&lt;regexp&gt;</kbd>.</descr>
      </it>

      <it>
        <key/>
        <func>customize-face &lt;Enter&gt; &lt;face&gt;</func>
        <descr>Open a new customization buffer for the face name given
        by <kbd>&lt;face&gt;</kbd>.</descr>
      </it>

      <it>
        <key/>
        <func>customize-group &lt;Enter&gt; &lt;group&gt;</func>
        <descr>Open a new customization buffer for the group name
        given by <kbd>&lt;group&gt;</kbd>.</descr>
      </it>

      <it>
        <key/>
        <func>customize-option &lt;Enter&gt; &lt;option&gt;</func>
        <descr>Open a new customization buffer for the option name
        given by <kbd>&lt;option&gt;</kbd>.</descr>
      </it>

      <it>
        <key/>
        <func>customize-saved</func>
        <descr>Open a new customization buffer for all faces and
        options that you've changed with the Customize
        function.</descr>
      </it>
    </chapter>

    <chapter title="Help commands">
      <it>
        <key>Tab</key>
        <func/>
        <descr>This command performs command completion if given as
        part of a command, showing all possible input values for the
        given command.</descr>
      </it>

      <it>
        <key>&lt;command prefix&gt; or &lt;keystroke&gt; C-h</key>
        <func/>
        <descr>This command describes all the possible commands and
        functions available for the given <kbd>&lt;command
        prefix&gt;</kbd> or <kbd>&lt;keystroke&gt;</kbd>.</descr>
      </it>

      <it>
        <key>C-h c &lt;keystroke&gt;</key>
        <func>describe-key-briefly</func>
        <descr>This command reports in the minibuffer the name of
        function that <kbd>&lt;keystroke&gt;</kbd>is bound to.</descr>
      </it>

      <it>
        <key>C-h k &lt;keystroke&gt;</key>
        <func>describe-key</func>
        <descr>This command opens a new help-buffer window that
        describes the function that <kbd>&lt;keystroke&gt;</kbd> is
        bound to.</descr>
      </it>

      <it>
        <key>C-h l</key>
        <func>view-lossage</func>
        <descr>This command opens a new buffer and displays the last
        100 characters typed.</descr>
      </it>

      <it>
        <key/>
        <func>open-dribble-file</func>
        <descr>This command opens a specified file and dribbles a copy
        of all keyboard input to that file.</descr>
      </it>

      <it>
        <key/>
        <func>apropos</func>
        <descr>This command gives a list of apropos commands and
        variables to a given <kbd>regexp</kbd>.</descr>
      </it>

      <it>
        <key>C-h a &lt;regexp&gt;</key>
        <func>command-apropos</func>
        <descr>This command gives a list of apropos commands to
        regexp.</descr>
      </it>

      <it>
        <key>C-h b</key>
        <func>describe-bindings</func>
        <descr>This command describes all the valid key bindings for
        the current major mode in a new help buffer window.</descr>
      </it>

      <it>
        <key>C-h f &lt;function&gt;</key>
        <func>describe-function</func>
        <descr>This command describes the purpose of
        <kbd>&lt;function&gt;</kbd> in a new help buffer
        window.</descr>
      </it>

      <it>
        <key>C-h v &lt;variable&gt;</key>
        <func>describe-variable</func>
        <descr>This command describes the purpose of
        <kbd>&lt;variable&gt;</kbd> in a new help buffer
        window.</descr>
      </it>

      <it>
        <key>C-h w &lt;function&gt;</key>
        <func>where-is</func>
        <descr>This command describes which keyboard binding (if any)
        a particular <kbd>&lt;function&gt;</kbd> is bound to.</descr>
      </it>

      <it>
        <key>C-h s | F1 s</key>
        <func>describe-syntax</func>
        <descr>Display the <em>Emacs Syntax Table</em> for the current
        mode (useful for the matching parentheses commands).</descr>
      </it>
    </chapter>

    <chapter title="INFO commands">
      <it>
        <key>H</key>
        <func>Info-help</func>
        <descr>This command opens a hands-on <kbd>Info</kbd> tutorial
        in a new buffer.</descr>
      </it>

      <it>
        <key>Q</key>
        <func>Info-exit</func>
        <descr>This command moves to the last buffer you visited,
        putting the <kbd>*info*</kbd> buffer in the end of the buffer
        list.</descr>
      </it>

      <it>
        <key>&lt;Enter&gt;</key>
        <func/>
        <descr>This command follows the cross reference at or near
        point.</descr>
      </it>

      <it>
        <key>N</key>
        <func>Info-next</func>
        <descr>This command moves to the current node's
        <kbd>Next</kbd> node.</descr>
      </it>

      <it>
        <key>P</key>
        <func>Info-prev</func>
        <descr>This command moves to the current node's
        <kbd>Previous</kbd> node.</descr>
      </it>

      <it>
        <key>U</key>
        <func>Info-up</func>
        <descr>This command moves to the current node's <kbd>Up</kbd>
        node.</descr>
      </it>

      <it>
        <key>D</key>
        <func>Info-directory</func>
        <descr>This command moves to the <kbd>Directory</kbd>
        node.</descr>
      </it>

      <it>
        <key>L</key>
        <func>Info-last</func>
        <descr>This command moves to the last node you
        visited.</descr>
      </it>

      <it>
        <key>T</key>
        <func>Info-top-node</func>
        <descr>This command moves to the <kbd>Top</kbd> node of the
        current document.</descr>
      </it>

      <it>
        <key>&gt;</key>
        <func>Info-final-node</func>
        <descr>This command moves to the final node pointed to in the
        current document.</descr>
      </it>

      <it>
        <key>&lt;Spacebar&gt;</key>
        <func>Info-scroll-up</func>
        <descr>This command moves forward in the current node by a
        single screen; if at the end of the node, then move to the
        Next node.</descr>
      </it>

      <it>
        <key>&lt;Backspace&gt;</key>
        <func>Info-scroll-down</func>
        <descr>This command moves backward in the current node by a
        single screen; if at the beginning of the node, then move to
        the Previous node.</descr>
      </it>

      <it>
        <key>B</key>
        <func>beginning-of-buffer</func>
        <descr>This command goes to the beginning of the current
        node.</descr>
      </it>

      <it>
        <key>S</key>
        <func>Info-search</func>
        <descr>This command searches forward in the current
        <kbd>Info</kbd> document for a given
        <kbd>regexp</kbd>.</descr>
      </it>

      <it>
        <key>Tab</key>
        <func>Info-next-reference</func>
        <descr>This command moves the cursor forward to the first
        cross reference.</descr>
      </it>

      <it>
        <key>M-Tab</key>
        <func>Info-prev-reference</func>
        <descr>This command moves the cursor backward to the last
        cross reference.</descr>
      </it>
    </chapter>

    <chapter title="Documentation files">
      <it>
        <key>C-h C-d</key>
        <func>describe-distribution</func>
        <descr>File <kbd>DISTRIB</kbd>: Information on obtaining a
        copy of the latest distribution of the Emacs software</descr>
      </it>

      <it>
        <key>C-h F</key>
        <func>view-emacs-faq</func>
        <descr><kbd>/usr/share/info/</kbd>;
        <kbd>emacs-mainversion/efaq.gz</kbd> Emacs FAQ</descr>
      </it>

      <it>
        <key>C-h C-c</key>
        <func>describe-copying</func>
        <descr>File <kbd>COPYING</kbd>: GNU General Public License
        (GNU GPL)</descr>
      </it>

      <it>
        <key>C-h C-w</key>
        <func>describe-no-warranty</func>
        <descr>File <kbd>COPYING</kbd>: Section "NO WARRANTY" of the
        GNU General Public License (GNU GPL)</descr>
      </it>

      <it>
        <key>C-h n</key>
        <func>view-emacs-news</func>
        <descr>File <kbd>NEWS</kbd>: News concerning the latest
        changes in the current version of Emacs</descr>
      </it>

      <it>
        <key>C-h P</key>
        <func>view-emacs-problems</func>
        <descr><kbd>File PROBLEMS</kbd>: Emacs problems file</descr>
      </it>

      <it>
        <key>C-h C-p</key>
        <func>describe-project</func>
        <descr>File <kbd>THE-GNU-PROJECT</kbd>: Essay by Richard
        Stallman concerning the founding of the GNU Project</descr>
      </it>

      <it>
        <key>C-h t</key>
        <func>help-with-tutorial</func>
        <descr>File <kbd>TUTORIAL</kbd>: Hands-on tutorial for
        learning the basics of Emacs</descr>
      </it>
    </chapter>

    <chapter title="Things you should never know about">
      <it>
        <key/>
        <func>hanoi</func>
        <descr>The hanoi tower, with a default of 3 discs; <kbd>M-x
        hanoi-unix</kbd> and <kbd>M-x hanoi-unix-64</kbd> uses the
        unix timestamp, making a move each second in line with the
        clock, and with the latter pretending it uses a 64-bit
        clock.</descr>
      </it>

      <it>
        <key/>
        <func>5x5</func>
        <descr>You are given a 5x5 grid with a central cross already
        filled-in; your goal is to fill all the cells by toggling them
        on and off in the right order to win. With an optional digit
        argument you can change the size of the grid.</descr>
      </it>

      <it>
        <key/>
        <func>animate-birthday-present</func>
        <descr>A fancy birthday present animation.</descr>
      </it>

      <it>
        <key/>
        <func>butterfly</func>
        <descr>The animate package is also used by <kbd>M-x
        butterfly</kbd> command, a command added to Emacs as an homage
        to the XKCD strip at <kbd>www.xkcd.com/378/</kbd></descr>
      </it>

      <it>
        <key/>
        <func>blackbox</func>
        <descr>The object of the game is to find four hidden balls by
        shooting rays into the black box. There are four
        possibilities: 1) the ray will pass thru the box undisturbed,
        2) it will hit a ball and be absorbed, 3) it will be deflected
        and exit the box, or 4) be deflected immediately, not even
        being allowed entry into the box.</descr>
      </it>

      <it>
        <key/>
        <func>bubbles</func>
        <descr>You must clear out as many “bubbles” as you can in as
        few moves as possible. When you remove bubbles the other
        bubbles drop and stick together. You can configure the
        difficulty of the game by calling <kbd>M-x
        bubbles-set-game-&lt;difficulty&gt;</kbd> where
        &lt;difficulty&gt; is one of: <kbd>easy</kbd>,
        <kbd>medium</kbd>, <kbd>difficult</kbd>, <kbd>hard</kbd>, or
        <kbd>userdefined</kbd>. Furthermore, you can alter the
        graphics, grid size and colors using Customize: <kbd>M-x
        customize-group bubbles</kbd>.</descr>
      </it>

      <it>
        <key/>
        <func>decipher</func>
        <descr>It’s a (very complex) package to help you break simple
        substitution ciphers (like cryptogram puzzles) using a helpful
        user interface.</descr>
      </it>

      <it>
        <key/>
        <func>dissociated-press</func>
        <descr>It's a semi-randomizing algorithm that takes your
        buffer, runs it through a blender, and displays the
        result.</descr>
      </it>

      <it>
        <key/>
        <func>doctor</func>
        <descr>Based on the original <em>ELIZA</em>, the “Doctor”
        tries to psychoanalyze what you say and attempts to repeat the
        question back to you. It simulates a Rogerian psychotherapist
        and uses rules, dictated into a script, to respond with
        non-directional questions to user inputs.</descr>
      </it>

      <it>
        <key/>
        <func>dunnet</func>
        <descr>Emacs’s very own Zork-like text adventure game.</descr>
      </it>

      <it>
        <key/>
        <func>gomoku</func>
        <descr>You have to connect 5 squares, tic-tac-toe style. You
        can customize the group <kbd>gomoku</kbd> to adjust the size
        of the grid.</descr>
      </it>

      <it>
        <key/>
        <func>life</func>
        <descr>Conway’s Game of Life is a famous example of cellular
        automata. The Emacs version comes with a handful of starting
        patterns that you can (programmatically with elisp) alter by
        adjusting the <kbd>life-patterns</kbd> variable.</descr>
      </it>

      <it>
        <key/>
        <func>pong | snake | tetris</func>
        <descr>These classic games are all implemented using the Emacs
        package gamegrid, a generic framework for building grid-based
        games like Tetris and Snake.</descr>
      </it>

      <it>
        <key/>
        <func>solitaire</func>
        <descr>It is a peg-based game where you have to end up with
        just one stone on the board, by taking a stone (the
        <kbd>o</kbd>) and “jumping” over an adjacent stone into the
        hole (the <kbd>.</kbd>), removing the stone you jumped over in
        the process. Rinse and repeat until the board is empty. There
        is a handy solver built in called <kbd>M-x
        solitaire-solve</kbd> if you get stuck.</descr>
      </it>

      <it>
        <key/>
        <func>zone</func>
        <descr>A series of screensavers. Type <kbd>M-x zone</kbd> and
        watch what happens to your screen! You can configure a
        screensaver idle time by running <kbd>M-x zone-when-idle</kbd>
        (or calling it from elisp) with an idle time in seconds. You
        can turn it off with <kbd>M-x
        zone-leave-me-alone</kbd>.</descr>
      </it>

      <it>
        <key/>
        <func>mpuz</func>
        <descr>A multiplication puzzle where you have to replace the
        letters with numbers and ensure the numbers add (multiply?)
        up. You can run <kbd>M-x mpuz-show-solution</kbd> to solve the
        puzzle if you get stuck.</descr>
      </it>

      <it>
        <key/>
        <func>morse-region</func>
        <descr>Translates a region into morse code. Undo
        (<kbd>C-S-_</kbd>) or <kbd>M-x unmorse-region</kbd> to
        unmorse.</descr>
      </it>
    </chapter>

  </body>

  <footer>
    <txline>Copyright (C) 2017 Pete Za Sayari</txline>
    <txline>&lt;petezasayari@gmail.com&gt;</txline>
    <txline/>
    <txline>Released under the terms of the GNU General Public
    License version 3 or later.</txline>
    <txline/>
    <txline>For more Emacs documentation see the Emacs distribution or
    http://www.gnu.org/software/emacs</txline>
    <txline/>
    <txline>The last version of the cheatsheet so as the XML-XSLT
    source is at https://github.com/PeteZaSayari/emacs-cs.</txline>
  </footer>

</cheatsheet>

<!--
 !  == Dictionary ===
 !
 !  <it>      =   <item>
 !  <key>     =   <key>
 !  <func>    =   <function>
 !  <descr>   =   <description>
 !
 !
 !  == Management ===
 !
 !  Validating: xmllint ~~noout ~~valid emacs-cs.xml
 !
 !  HTML: xsltproc tohtml.xsl emacs-cs.xml > emacs-cs.html && /
 !        xmllint ~~format emacs-cs.html -o emacs-cs.html
 !
 !-->
